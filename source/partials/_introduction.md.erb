Welcome to the API. Each **"Application"** that needs to access this API will be setup with their own **"Company APIKEY"**. This will make the app unique for the Company-specific Users data.

**Overview of API:**

This API is an "in-between" project that connects with "Application" company's Salesforce (SF) + Boxr + Twilio data.
User's will manage their payments, notifications & alerts, and legal documents here so customer support won't need to handle everything on calls.

User will sign up, SF verifies User exists for the given "Application" company (SF account), account is created, Two-Factor Authentication is setup with User's phone, access to SF + Boxr data granted once logged in.

Purpose of User portal is to reduce calls for all payment/notification/document management/other required actions that don't need to happen over the phone. This API creates the in-between connections needed to simplify the company's custom SF, Boxr, and Twilio processes. Company uses custom logic within their SF account, in which they have some custom SF API endpoints that we connect to. This API will not work out-of-the-box with any SF account, as it'll need to be customized for their specific needs.

**The basic API flow will follow these steps:**

1. **New company server**
  - Save **Company APIKEY** in ENV variable or config file
  - **Initialize Server**
      - **NOTE:** `Authorization: Token token=[COMPANY_APIKEY]` required
      - Hit [**Company initialize endpoint**](#show-initialize-site)
      - Save results (somehow) in JSON config, or ENV variables
      - **NOTES:**
          - Site code will utilize this JSON config file for site appearance
          - To refresh settings (if Company data ever changes), hit the endpoint again and replace JSON config file

2. **User Sign Up**
  - **NOTE:** `Authorization: Token token=[COMPANY_APIKEY]` required to make User API calls **before** they're logged in
  - **1. Sign Up - Search:**
      - Hit [**User sign up search endpoint**](#sign-up-search)
      - On success, continue on with User Sign Up
  - **2. Sign Up:**
      - Hit [**User sign up endpoint**](#sign-up)
      - On success, retrieve Users `[JWT]`
          - **NOTE:** Verify the `[JWT]` Signature before saving, this can (**SHOULD**) only ever be done on the server, never client-side (as this will reveal the secret key used to verify/decode `[JWT]`)
      - Save `[JWT]` for future User API requests

3. **User Sign In**
  - **NOTE:** `Authorization: Token token=[COMPANY_APIKEY]` required to make User API calls **before** they're logged in
  - Hit [**User sign in endpoint**](#sign-in)
  - On success, retrieve Users `[JWT]`
      - **NOTE:** Verify the `[JWT]` Signature before saving, this can (**SHOULD**) only ever be done on the server, never client-side (as this will reveal the secret key used to verify/decode `[JWT]`)
  - Save `[JWT]` for future User API requests

4. **User API Access**
  - **NOTE:** `Authorization: Bearer [JWT]` required to make all User API calls once they're logged in
  - Hit necessary endpoint
  - On success, a new User `[JWT]` will be returned with a refreshed **Expire Date/Time** (30 minutes?)
      - **NOTE:** Verify the `[JWT]` Signature before saving, this can (**SHOULD**) only ever be done on the server, never client-side (as this will reveal the secret key used to verify/decode `[JWT]`)
  - Save `[JWT]` for future User API requests
  - When User inactive for X minutes, the `[JWT]` will be rejected
      - **NOTE:** once rejected, delete saved `[JWT]` and redirect User to `/users/sign_in` page with appropriate notice

<%= partial "partials/logic_callout.md.erb", :locals => {
  header_type:  "caution", 
  header:       "LOGIC CHECK NEEDED", 
  points: [
    "How will we initialize the web interface?",
    "Will this need to be a CLI/CRON job or similar?"
  ]
} %>
